package poly.service;

import poly.child.Engineer;
import poly.child.Manager;
import poly.parent.Employee;

/*
 * Employee의 하위 클래스들을 Handling 하는 서비스 클래스
 */
public class EmployeeService {
	//1. 객체의 정보를 출력하는 기능을 정의
	
	public Employee getEmployeeInfo(Employee e) {
		return e;
	}
	
	/*public Employee getEmployeeInfo(Manager m) {
		return m;
		
	}

	public Employee getEmployeeInfo(Engineer eg) {
		return eg;
	
	}*/
	
	public void getAllEmployeeInfo(Employee[] ea) {
		for(Employee e : ea) 
			
			System.out.println(e);
	}
		
	//getEmployeeInfo
	/*
	 * instanceof
	 * ::
	 * 부모 타입으로 생성된 실질적인 자식객체를 구별할때 쓰는 키워드
	 * 문법
	 * if(부모객체변수 instanceof 자식클래스타입){
	 */
	
	public void changeEmployeeInfo(Employee[] ea) {
			//Manager는 총부무로 부서를 변경하고
			//Engineer는 기술을 Javascript로 변경
			for(Employee e : ea) {
				//e 타입으로 새성되 객체가 Manager라면
				if(e instanceof Manager) {
					Manager m=(Manager)e;
					m.changeDept("총무부");
				}
				//e 타입으로 새성되 객체가 Engineer라면
				else if(e instanceof Engineer) {
					Engineer eg1 =(Engineer)e;
					eg1.changeTech("Javascript");
					
		
	}
}
	}
	//1. 테스트 클래스에서 넘겨받은 empID의 값과 일치하는
	//Employee의 자식객체를 리턴하는 기능
	
	//2. 테스트 클래스에서 넘겨받은 address의 갑소가 일치하는
	// 객체를 리턴하는 기능
	
	//3. Employee의 연봉을 리턴하는 기능
	
	//4. 연간 총 인건비의 총액을 리턴하는 기능
	
}
